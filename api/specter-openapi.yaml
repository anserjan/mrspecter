openapi: 3.0.0
info:
  title: MrSpecter API
  description: API
  version: 2.0.0
servers:
- url: http://localhost:8080
  description: Local Testing Server
paths:
  /user:
    post:
      summary: Adds a new user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              example:
                name: Jessica
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  auth_token:
                    type: string
                example:
                  id: "637620d6af622b1c8dbf7f7e"
                  name: Jessica
                  auth_token: vuuunrv82nrvu29rvn238r2vnr23v23v
        "400":
          description: User couldn't be created
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "name field missing in body"
  /user/{userId}:
    get:
      summary: Get a user by ID
      parameters:
      - name: userId
        in: path
        description: Numeric ID of the user to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "637620d6af622b1c8dbf7f7e"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users_body'
        "404":
          description: User doesn't exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "UserID existiert nicht: 637620d6af622b1c8dbf7f7e"

    put:
      summary: Changes user info (bearerAuth)
      parameters:
      - name: userId
        in: path
        description: Numeric ID of the user to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "637620d6af622b1c8dbf7f7e"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users_userId_body'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                example:
                  id: "637620d6af622b1c8dbf7f7e"
                  name: Thomas
        "400":
          description: User couldn't be changed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error message"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Authorization header missing"
      security:
      - bearerAuth: []
  /gamesession:
    post:
      summary: Creates a gamesession
      responses:
        "201":
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "12345"
                  creator:
                    type: string
                    example: "637620d6af622b1c8dbf7f7e"
                  users:
                    type: array
                    items:
                      type: string
                      example: "637620d6af622b1c8dbf7f7e"
                  gametime:
                    type: integer
                    description: Gametime in Seconds
                    example: 300
                  gamestate:
                    type: string
                    example: "lobby"
                  huntedUser:
                    type: string
                    example: "637620d6af622b1c8dbf7f7e"
                  borders:
                    type: array
                    description: array of geolocations
                    example: {  lat: "5902302390", lng: "2349440234" }
                    items:
                      type: object
                      properties:
                        lat:
                          type: string
                        lng:
                          type: string
        "400":
          description: Gamesession can not be created
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Error message"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "not authorized"
      security:
      - bearerAuth: []
  /gamesession/{gamesessionId}:
    get:
      summary: Get all nessesary gamesession data but not the positions, joins gamesession if not in it yet
      parameters:
      - name: gamesessionId
        in: path
        description: Numeric ID of the gamesession to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "637620d6af622b1c8dbf7f7e"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "12345"
                  creator:
                    type: string
                    example: "637620d6af622b1c8dbf7f7e"
                  users:
                    type: array
                    items:
                      type: string
                      example: "637620d6af622b1c8dbf7f7e"
                  gametime:
                    type: integer
                    description: Gametime in Seconds
                    example: 300
                  borders:
                    type: array
                    description: get array of geolocations
                    items:
                      type: object
                      example: {  lat: "5902302390", lng: "2349440234" }
                      properties:
                        lat:
                          type: string
                        lng:
                          type: string
                  huntedUser:
                    type: string
                    example: 637620d6af622b1c8dbf7f7e
                  # hunted:
                  #   type: array
                  #   description: list of hunted users
                  #   items:
                  #     type: string
                  #     example: 637620d6af622b1c8dbf7f7e
                  gamestate:
                    type: string
                    description: current state of the gamesession
                    example: "LOBBY"
                  ruleViolations:
                    type: array
                    description: rule violations in gamesession
                    items:
                      type: object
                      example: {  userId: "639e043b093a78d12d4f7491", borderViolationTime: 55 }
                      properties:
                        userId:
                          type: string
                        borderViolationTime:
                          type: number
        "404":
          description: Gamesession doesn't exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Gamesession not found"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "not authorized"
      security:
      - bearerAuth: []
    put:
      summary: Update gamesession rules like borders, maximalUsers, gametime, huntedUser
      parameters:
      - name: gamesessionId
        in: path
        description: Numeric ID of the gamesession to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "637620d6af622b1c8dbf7f7e"
      requestBody:
        description: One or more attributes of the gamesession to update
        required: true
        content:
          application/json:
            schema:
              type: object
              example: { huntedUser: "637620d6af622b1c8dbf7f7e", borders: [{ lat: "3942032092", lng: "5959502021" }, {lat: "6464588856", lng: "65645787843" } ] }
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "12345"
                  creator:
                    type: string
                    example: "637620d6af622b1c8dbf7f7e"
                  users:
                    type: array
                    items:
                      type: string
                      example: "637620d6af622b1c8dbf7f7e"
                  gametime:
                    type: integer
                    description: Gametime in Seconds
                    example: 300
                  borders:
                    type: array
                    description: get array of geolocations
                    example: [{ lat: "3942032092", lng: "5959502021" }, {lat: "6464588856", lng: "65645787843" } ]
                    items:
                      type: object
                      properties:
                        lat:
                          type: string
                        lng:
                          type: string
                  huntedUser:
                    type: string
                    example: 637620d6af622b1c8dbf7f7e
        "400":
          description: Update failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "update failed"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "not authorized"
      security:
      - bearerAuth: []
    delete:
      summary: Destroy gamesessions all attended users and all positions
      parameters:
      - name: gamesessionId
        in: path
        description: Numeric ID of the gamesession to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "637620d6af622b1c8dbf7f7e"
      responses:
        "204":
          description: Ok
        "400":
          description: Delete failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Delete failed"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "not authorized"
      security:
        - bearerAuth: []
  /gamesession/{gamesessionId}/positions:
    post:
      summary: Send current position, get all positions
      parameters:
      - name: gamesessionId
        in: path
        description: Numeric ID of the gamesession to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "637620d6af622b1c8dbf7f7e"
      requestBody:
        description: New positional informations
        required: true
        content:
          application/json:
            schema:
              type: object
              example: { lat: "3942032092", lng: "5959502021" }
      responses:
        "201":
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  positions:
                    type: array
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          example: "637620d6af622b1c8dbf7f7e"
                        lat:
                          type: string
                          example: "5902302390"
                        lng:
                          type: string
                          example: "2349440234"
                  gamestate:
                    type: string
                    description: current state of the gamesession
                    example: "LOBBY"
        "400":
          description: "Error sending or receiving positions"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "error message"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "not authorized"
      security:
      - bearerAuth: []
  /gamesession/{gamesessionId}/start:
    get:
      summary: Starts the game
      parameters:
      - name: gamesessionId
        in: path
        description: Numeric ID of the gamesession to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "637620d6af622b1c8dbf7f7e"
      responses:
        "200":
          description: Gamesession will beginn, gamestate will update
        "400":
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "error message"
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "not authorized"
      security:
      - bearerAuth: []
  /gamesession/{gamesessionId}/finish:
    get:
      summary: Finishes the current game
      parameters:
      - name: gamesessionId
        in: path
        description: Numeric ID of the gamesession to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "637620d6af622b1c8dbf7f7e"
      responses:
        "200":
          description: Gamesession will stop, gamestate will update
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "not authorized"
      security:
      - bearerAuth: []
  /gamesession/{gamesessionId}/leave:
    get:
      summary: Remove self from gamesession
      parameters:
      - name: gamesessionId
        in: path
        description: Numeric ID of the gamesession to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "637620d6af622b1c8dbf7f7e"
      responses:
        "200":
          description: Remove user from userlist
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "not authorized"
      security:
      - bearerAuth: []
  /gamesession/{gamesessionId}/ruleViolation:
    post:
      summary: Send own rule violation the notify all users in their next pull
      parameters:
      - name: gamesessionId
        in: path
        description: Numeric ID of the gamesession to get
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: "637620d6af622b1c8dbf7f7e"
      requestBody:
        description: Rule violation information
        required: true
        content:
          application/json:
            schema:
              type: object
              example: { borderViolationTime: 15 }
      responses:
        "200":
          description: "Rule violations updated"
        "404":
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Gamesession not found"  
        "401":
          description: Authentication failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "not authorized"
      security:
      - bearerAuth: []
    # get:
    #   summary: Get all Rule Violations
    #   parameters:
    #   - name: gamesessionId
    #     in: path
    #     description: Numeric ID of the gamesession to get
    #     required: true
    #     style: simple
    #     explode: false
    #     schema:
    #       type: string
    #       example: "637620d6af622b1c8dbf7f7e"
    #   responses:
    #     "200":
    #       description: Remove user from userlist
    #     "401":
    #       description: Authentication failed
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               error:
    #                 type: string
    #                 example: "not authorized"
    #   security:
    #   - bearerAuth: []
components:
  schemas:
    users_userId_body:
      type: object
      properties:
        name:
          type: string
      example:
        name: Thomas
    users_body:
      type: object
      properties:
        name:
          type: string
      example:
        name: Jessica
    inline_response_200_1:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      example:
        id: "637620d6af622b1c8dbf7f7e"
        name: Thomas
    inline_response_200:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        auth_token:
          type: string
      example:
        id: "637620d6af622b1c8dbf7f7e"
        name: Jessica
        auth_token: vuuunrv82nrvu29rvn238r2vnr23v23v
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
